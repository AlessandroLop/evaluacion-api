# üß™ Ejemplos de solicitudes HTTP para probar la API
# Usa estos ejemplos con VS Code REST Client, Postman, Thunder Client, etc.

### üè† P√°gina principal de la API
GET http://localhost:3001/

### üìö Documentaci√≥n interactiva con Scalar
GET http://localhost:3001/docs

### üìÑ Especificaci√≥n OpenAPI JSON
GET http://localhost:3001/api-docs.json

### üè• Health Check - Estado de la API
GET http://localhost:3001/api/evaluaciones/health

---

# === ENDPOINTS PARA EL FORMULARIO DE EVALUACI√ìN ===

### üë®‚Äçüè´ 1. Obtener todos los catedr√°ticos disponibles
GET http://localhost:3001/api/evaluaciones/catedraticos

### üìö 2. Obtener cursos del catedr√°tico con ID 1 (MARIO ROBERTO MENDEZ ROMERO)
GET http://localhost:3001/api/evaluaciones/catedraticos/1/cursos

### üìö 3. Obtener cursos del catedr√°tico con ID 2 (OTTO RIGOBERTO ORTIZ PEREZ)
GET http://localhost:3001/api/evaluaciones/catedraticos/2/cursos

### ‚ùì 4. Obtener las 5 preguntas fijas del formulario
GET http://localhost:3001/api/evaluaciones/preguntas

### ‚úçÔ∏è 5. Registrar una nueva evaluaci√≥n (ejemplo completo)
POST http://localhost:3001/api/evaluaciones
Content-Type: application/json

{
  "cursoId": 1,
  "comentarios": "Excelente profesor Mario Roberto, muy claro en sus explicaciones de programaci√≥n b√°sica. Sus ejemplos pr√°cticos ayudan mucho a entender los conceptos fundamentales. Siempre est√° dispuesto a resolver dudas y crear un ambiente de aprendizaje positivo.",
  "respuestas": [5, 4, 5, 4, 5]
}

### ‚úçÔ∏è 6. Otra evaluaci√≥n para el curso de programaci√≥n avanzada
POST http://localhost:3001/api/evaluaciones
Content-Type: application/json

{
  "cursoId": 2,
  "comentarios": "El curso de programaci√≥n avanzada es muy completo. El profesor domina bien los temas complejos y logra explicarlos de manera comprensible. Los proyectos asignados son desafiantes pero educativos.",
  "respuestas": [4, 5, 4, 5, 4]
}

### ‚úçÔ∏è 7. Evaluaci√≥n para an√°lisis de sistemas
POST http://localhost:3001/api/evaluaciones
Content-Type: application/json

{
  "cursoId": 3,
  "comentarios": "Otto Rigoberto es un excelente profesor de an√°lisis de sistemas. Su metodolog√≠a es muy estructurada y los casos de estudio que presenta son muy relevantes para la industria actual.",
  "respuestas": [5, 5, 4, 4, 5]
}

---

# === ENDPOINTS PARA ESTAD√çSTICAS ===

### üìä 8. Obtener estad√≠sticas completas de todas las evaluaciones
GET http://localhost:3001/api/evaluaciones/estadisticas

### üìà 9. Obtener estad√≠sticas agrupadas por seminario
GET http://localhost:3001/api/evaluaciones/estadisticas/seminarios

---

# === EJEMPLOS DE ERRORES PARA TESTING ===

### ‚ùå Error: Comentarios vac√≠os
POST http://localhost:3001/api/evaluaciones
Content-Type: application/json

{
  "cursoId": 1,
  "comentarios": "",
  "respuestas": [5, 4, 5, 4, 5]
}

### ‚ùå Error: Comentarios muy cortos (menos de 10 caracteres)
POST http://localhost:3001/api/evaluaciones
Content-Type: application/json

{
  "cursoId": 1,
  "comentarios": "Muy bien",
  "respuestas": [5, 4, 5, 4, 5]
}

### ‚ùå Error: Respuestas incompletas (menos de 5)
POST http://localhost:3001/api/evaluaciones
Content-Type: application/json

{
  "cursoId": 1,
  "comentarios": "Buen profesor, explica claramente los conceptos",
  "respuestas": [5, 4, 5]
}

### ‚ùå Error: Puntuaci√≥n fuera de rango
POST http://localhost:3001/api/evaluaciones
Content-Type: application/json

{
  "cursoId": 1,
  "comentarios": "Buen profesor, explica claramente los conceptos",
  "respuestas": [5, 4, 6, 4, 0]
}

### ‚ùå Error: Curso inexistente
POST http://localhost:3001/api/evaluaciones
Content-Type: application/json

{
  "cursoId": 999,
  "comentarios": "Buen profesor, explica claramente los conceptos",
  "respuestas": [5, 4, 5, 4, 5]
}

### ‚ùå Error: ID de catedr√°tico inv√°lido
GET http://localhost:3001/api/evaluaciones/catedraticos/abc/cursos

### ‚ùå Error: Catedr√°tico inexistente
GET http://localhost:3001/api/evaluaciones/catedraticos/999/cursos

---

# üí° Comandos de terminal √∫tiles:

# Instalar dependencias
# npm install

# Ejecutar en modo desarrollo
# npm run dev

# Generar cliente de Prisma
# npm run db:generate

# Ejecutar seed
# npm run db:seed

# Abrir Prisma Studio
# npm run db:studio

# Ver logs en tiempo real
# npm run dev | grep -E "(GET|POST|PUT|DELETE|ERROR)"