const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();


// Reinicia la secuencia asociada a table.column a 1 (nextval devolver√° 1)
async function restartSequenceToOne(table, column) {
  const sql = `SELECT setval(pg_get_serial_sequence('${table}','${column}'), 1, false);`;
  await prisma.$executeRawUnsafe(sql);
}

async function setSequenceToMax(table, column) {
  // Ajusta la secuencia al MAX(id) actual (is_called = true para que nextval devuelva max+1)
  const sql = `
    SELECT setval(
      pg_get_serial_sequence('${table}','${column}'),
      COALESCE((SELECT MAX("${column}") FROM "${table}"), 0),
      true
    );
  `;
  await prisma.$executeRawUnsafe(sql);
}

async function main() {
  console.log('üå± Iniciando seed: limpieza e inserci√≥n de catedr√°ticos, cursos y preguntas...');

  // 0) Reiniciar secuencias a 1 para permitir que los primeros IDs generados sean 1,2,...
  // Ajusta los nombres de columna si tu esquema usa otros nombres.
  try {
    await restartSequenceToOne('catedratico', 'catedraticoId');
    await restartSequenceToOne('curso', 'cursoId');
    await restartSequenceToOne('pregunta', 'preguntaId');
    await restartSequenceToOne('evaluacion', 'evaluacionId');
    await restartSequenceToOne('respuesta', 'respuestaId');
    console.log('üîÅ Secuencias reiniciadas a 1 (si existen).');
  } catch (err) {
    console.warn('‚ö†Ô∏è No se pudieron reiniciar secuencias autom√°ticamente. Revisa nombres de tablas/columnas. Error:', err.message);
  }

  // 1) Borrar en orden (hijos antes que padres)
  console.log('üßπ Borrando datos existentes...');
  await prisma.respuesta.deleteMany().catch(() => {});
  await prisma.evaluacion.deleteMany().catch(() => {});
  await prisma.curso.deleteMany().catch(() => {});
  await prisma.pregunta.deleteMany().catch(() => {});
  await prisma.catedratico.deleteMany().catch(() => {});
  console.log('‚úÖ Datos existentes borrados.');

  // 2) Lista de catedr√°ticos (seg√∫n tu lista) - corregido el nombre de Oscar
  const catedraticosList = [
    'Byron R√©ne Prado Ju√≠',
    'Flavio Arturo Ju√°rez Aristondo',
    'Edwin Estuado Cordova Milian',
    'Fredy Ademar Ordo√±ez Alonzo',
    'Evelyn Raquel Cabrera S√°nchez',
    'Richard David Ort√≠z Sasv√≠n',
    'Oscar Alejandro Paz Campos', // CORRECCI√ìN
    'Mario Roberto M√©ndez Romero',
    'Carlos Amilcar Tez√≥ Palencia',
    'Dany Otoniel Oliva Beltet√≥n',
    'Otto Rigoberto Ort√≠z P√©rez',
    'Allan Alberto Morataya G√≥mez',
    'Oscar Antonio Valiente Arreaga',
    'Mario Alfredo Cerna Yanes'
  ];

  console.log('üë®‚Äçüè´ Creando catedr√°ticos...');
  const createdMap = {};
  for (const nombre of catedraticosList) {
    try {
      const c = await prisma.catedratico.create({
        data: { nombreCompleto: nombre }
      });
      createdMap[nombre] = c.catedraticoId;
      console.log(`  ‚úÖ ${nombre} (ID: ${c.catedraticoId})`);
    } catch (err) {
      console.error(`  ‚ùå Error creando ${nombre}:`, err.message);
    }
  }

  // 3) Cursos (con seminario) - tener en cuenta catedr√°ticos que dictan varios cursos
  const cursos = [
    // Seminario - Ciencias de la Ingenier√≠a
    { nombreCurso: 'Calculo', seminario: 'Ciencias de la Ingenier√≠a', catedratico: 'Byron R√©ne Prado Ju√≠' },
    { nombreCurso: 'Precalculo', seminario: 'Ciencias de la Ingenier√≠a', catedratico: 'Byron R√©ne Prado Ju√≠' },
    { nombreCurso: 'Metodolog√≠a de la Investigaci√≥n', seminario: 'Ciencias de la Ingenier√≠a', catedratico: 'Flavio Arturo Ju√°rez Aristondo' },
    { nombreCurso: 'Estadistica', seminario: 'Ciencias de la Ingenier√≠a', catedratico: 'Edwin Estuado Cordova Milian' },
    { nombreCurso: 'Fisica', seminario: 'Ciencias de la Ingenier√≠a', catedratico: 'Fredy Ademar Ordo√±ez Alonzo' },
    { nombreCurso: 'Electronica', seminario: 'Ciencias de la Ingenier√≠a', catedratico: 'Evelyn Raquel Cabrera S√°nchez' },

    // Seminario - An√°lisis Dise√±o y Desarrollo
    { nombreCurso: 'Ingenieria de Software', seminario: 'An√°lisis Dise√±o y Desarrollo', catedratico: 'Richard David Ort√≠z Sasv√≠n' },
    { nombreCurso: 'Bases de Datos', seminario: 'An√°lisis Dise√±o y Desarrollo', catedratico: 'Oscar Alejandro Paz Campos' },
    { nombreCurso: 'Programaci√≥n b√°sica', seminario: 'An√°lisis Dise√±o y Desarrollo', catedratico: 'Mario Roberto M√©ndez Romero' },
    { nombreCurso: 'Desarrollo Web', seminario: 'An√°lisis Dise√±o y Desarrollo', catedratico: 'Carlos Amilcar Tez√≥ Palencia' },
    { nombreCurso: 'Programaci√≥n Avanzada', seminario: 'An√°lisis Dise√±o y Desarrollo', catedratico: 'Dany Otoniel Oliva Beltet√≥n' },
    { nombreCurso: 'Analisis de Sistemas', seminario: 'An√°lisis Dise√±o y Desarrollo', catedratico: 'Otto Rigoberto Ort√≠z P√©rez' },

    // Seminario - Administraci√≥n de Sistemas
    { nombreCurso: 'Arquitectura de Computadoras', seminario: 'Administraci√≥n de Sistemas', catedratico: 'Otto Rigoberto Ort√≠z P√©rez' },
    { nombreCurso: 'Comunicaciones', seminario: 'Administraci√≥n de Sistemas', catedratico: 'Allan Alberto Morataya G√≥mez' },
    { nombreCurso: 'Redes', seminario: 'Administraci√≥n de Sistemas', catedratico: 'Oscar Antonio Valiente Arreaga' },
    { nombreCurso: 'Sistemas Operativos', seminario: 'Administraci√≥n de Sistemas', catedratico: 'Richard David Ort√≠z Sasv√≠n' },
    { nombreCurso: 'Seguridad de Sistemas', seminario: 'Administraci√≥n de Sistemas', catedratico: 'Mario Alfredo Cerna Yanes' }
  ];

  console.log('üìö Creando cursos...');
  for (const c of cursos) {
    const catedId = createdMap[c.catedratico];
    if (!catedId) {
      console.warn(`  ‚ö†Ô∏è  Catedr√°tico no encontrado para curso "${c.nombreCurso}" (${c.catedratico}). Omitido.`);
      continue;
    }
    try {
      const curso = await prisma.curso.create({
        data: {
          nombreCurso: c.nombreCurso,
          seminario: c.seminario,
          catedraticoId: catedId
        }
      });
      console.log(`  ‚úÖ ${curso.nombreCurso} (ID: ${curso.cursoId || curso.id || 'n/a'}) - Catedr√°tico ID: ${curso.catedraticoId}`);
    } catch (err) {
      console.error(`  ‚ùå Error creando curso ${c.nombreCurso}:`, err.message);
    }
  }

  // 4) Preguntas fijas
  console.log('üìù Creando preguntas fijas...');
  const preguntas = [
    'Dominio y manejo del tema del curso.',
    'Claridad en la exposici√≥n de los conceptos.',
    'Fomento de la participaci√≥n y resoluci√≥n de dudas.',
    'Calidad de los materiales y recursos de apoyo.',
    'Puntualidad y cumplimiento del programa del curso.'
  ];

  for (const texto of preguntas) {
    try {
      await prisma.pregunta.create({ data: { textoPregunta: texto } });
      console.log(`  ‚úÖ Pregunta: ${texto}`);
    } catch (err) {
      console.error(`  ‚ùå Error creando pregunta "${texto}":`, err.message);
    }
  }

  // 5) Ajustar secuencias al m√°ximo actual para evitar conflictos (nextval -> max+1)
  try {
    await setSequenceToMax('catedratico', 'catedraticoId');
    await setSequenceToMax('curso', 'cursoId');
    await setSequenceToMax('pregunta', 'preguntaId');
    await setSequenceToMax('evaluacion', 'evaluacionId');
    await setSequenceToMax('respuesta', 'respuestaId');
    console.log('üîÅ Secuencias ajustadas al m√°ximo actual.');
  } catch (err) {
    console.warn('‚ö†Ô∏è No se pudieron ajustar todas las secuencias autom√°ticamente. Revisa manualmente si hace falta. Error:', err.message);
  }

  console.log('üéâ Seed finalizado correctamente.');
}

main()
  .then(async () => {
    await prisma.$disconnect();
  })
  .catch(async (e) => {
    console.error('‚ùå Error durante el seed:', e);
    await prisma.$disconnect();
    process.exit(1);
  });